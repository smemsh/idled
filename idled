#!/usr/bin/env python3
"""
"""
__url__     = 'https://github.com/smemsh/idled'
__author__  = 'Scott Mcdermott <scott@smemsh.net>'
__license__ = 'GPL-2.0'

from sys import exit, hexversion
if hexversion < 0x030900f0: exit("minpython: %s" % hexversion)

from re import sub, search
from sys import argv, stdout, stderr
from ast import literal_eval as asteval
from glob import glob
from copy import copy
from enum import Enum, IntEnum
from time import strftime, sleep, localtime, time as nowtime
from errno import errorcode, ENODEV, EBADF
from queue import SimpleQueue, Empty
from struct import calcsize, iter_unpack
from signal import SIGTERM, SIGHUP, SIGUSR1, signal, pthread_kill
from datetime import timedelta
from argparse import ArgumentParser, RawTextHelpFormatter
from threading import Lock, get_ident
from traceback import format_exception, print_exc
from contextlib import suppress
from subprocess import check_output
from configparser import ConfigParser

from os.path import basename, realpath
from os import (
    getenv, unsetenv, chdir, read, kill, killpg, getpid, getpgid, execv,
    open as osopen, O_RDONLY, close, write,
    EX_OK as EXIT_SUCCESS,
    EX_SOFTWARE as EXIT_FAILURE,
)

from asyncio import (
    to_thread, create_task, wait, run,
    FIRST_EXCEPTION,
    CancelledError,
)

#
from inotify.adapters import Inotify

###

## /usr/include/linux/input.h:
# struct input_event
#  # sys/time.h bits/types/struct_timeval.h bits/types.h bits/typesizes.h
#  struct timeval time; # long int, long int
#  __u16 type;
#  __u16 code;
#  __s32 value;
#
## linux x86_64 (LP64): long 8, long 8, ushort 2, ushort 2, int 4 == 24 bytes
# $ cc -xc - << %; ./a.out
# #include <linux/input.h>
# #include <stdio.h>
# void main (void) { printf("size: %zu\n", sizeof(struct input_event)); }
# %
# size: 24
#
EVFMT = "llHHi"
EVSIZE = calcsize(EVFMT)
EVBUFSZ = EVSIZE << 10 # should always exhaust unread supply

# /usr/include/linux/input-event-codes.h
class Evtype(Enum):
    EV_SYN = 0x00 # sync packet, code: 0 = SYN_REPORT, 3 = SYN_DROPPED
    EV_KEY = 0x01 # code: 0-255 kbd, > 255 buttons, val: press = 1 release = 0
    EV_REL = 0x02 # mouse relative position (mouse and touchpad)
    EV_ABS = 0x03 # mouse absolute position (touchpad only)

# mouse and keyboard event queue inserted by input device monitor threads
evq = SimpleQueue()

# for places we need first use to block successors, eg restart()
lock = Lock()

# one queue for kbd+mouse events, inserted as (Qtype, timestamp) tuples
class Qtype(IntEnum):
    QT_KEY = 0
    QT_MOUSE = 1
qtypen = len(list(Qtype))

# we cannot just return a value because we're using FIRST_EXCEPTION
class IdledRescan(Exception): pass

###

# idle flag will drop if N events of type Qtype in S seconds
unidle_n = [0] * qtypen
unidle_s = copy(unidle_n)
unidle_n[Qtype.QT_KEY] = 0
unidle_s[Qtype.QT_KEY] = 0
unidle_n[Qtype.QT_MOUSE] = 0
unidle_s[Qtype.QT_MOUSE] = 0

# track global logical idle state
idle = True

# keep track of last time idle changed state to calculate interval
lastchange = nowtime()

# a few different threads need event descriptors and thread ids TODO sync?
threadids = {}
eventfds = []

###

def log(*args, **kwargs):
    print(*args, **kwargs)

def err(*args, **kwargs):
    log(*args, file=stderr, **kwargs)

def errnow(*args, **kwargs):
    err(f"{timetimefmt()}", *args, **kwargs)

def bomb(*args):
    err(*args)
    exit(EXIT_FAILURE)

def dprint(*args, **kwargs):
    if not debug: return
    err('debug:', *args, **kwargs)

def dprintvar(name, vars):
    if not debug: return
    err('debug:', name)
    pp(vars[name])

def exe(cmd):
    return check_output(cmd.split()).splitlines()

def print_except_trace(e, pretext):
    tb = e.__traceback__
    tt = ''.join(format_exception(type(e), e, tb))
    err(f"{pretext}: {tt}")

###

def check_sanity():
    pass

def process_args():

    global args

    def addflag(p, flagchar, longopt, help=None, /, **kwargs):
        options = list(("-%s --%s" % (flagchar, longopt)).split())
        p.add_argument(*options, action='store_true', help=help, **kwargs)

    def addarg(p, vname, vdesc, help=None, /, **kwargs):
        p.add_argument(vname, nargs='?', metavar=vdesc, help=help, **kwargs)

    p = ArgumentParser(
        prog            = invname,
        description     = __doc__.strip(),
        allow_abbrev    = False,
        formatter_class = RawTextHelpFormatter,
    )
    addflag (p, 'd', 'debug')

    args = p.parse_args(args)


def process_rcfile():

    global rc
    global unidle_n
    global unidle_s

    # rcfile vars are stored as attributes
    class RunControl: pass
    rcobj = RunControl()

    cfgparse = ConfigParser()
    rcfilename = getenv('IDLERC', "%s/.idlerc" % getenv('HOME'))
    with open(rcfilename) as rcfile:
        cfgparse.read_string("[rc]\n" + rcfile.read())
    for k, v in cfgparse['rc'].items(): setattr(rcobj, k, asteval(v))
    rc = rcobj

    unidle_n[Qtype.QT_KEY] = rc.unidle_keyboard_count
    unidle_s[Qtype.QT_KEY] = rc.unidle_keyboard_secs
    unidle_n[Qtype.QT_MOUSE] = rc.unidle_mouse_count
    unidle_s[Qtype.QT_MOUSE] = rc.unidle_mouse_secs


def restart(reason):

    lock.acquire()
    errnow(f"restart in {rc.restart_secs}s, reason: {reason}")
    sleep(rc.restart_secs) # allow input device change events to batch
    kill(pid, SIGHUP) # signal.raise_signal() seems not to kill main pid
    sleep(2<<32) # don't return in this thread before handler has killed us

###

def get_event_paths():
    paths = {}
    for suffix in ['kbd', 'mouse']:
        paths[suffix] = glob(f"/dev/input/by-path/*-event-{suffix}")
    return paths

def is_event_file(fname):
    return bool(search("-event-(kbd|mouse)$", fname))

def open_event_fds():
    global eventfds
    paths = sum(get_event_paths().values(), [])
    dprintvar('paths', vars())
    eventfds = [osopen(path, O_RDONLY) for path in paths]

# close(fd) and also send a signal to each queue_events(fd) thread, because
# otherwise they will not unblock from read() and know of fd closure.
# fortunately each Thread that asyncio.to_thread() has given us, will have
#
def abort_queues():

    try:
        lock.acquire()
        errnow(f"aborting {len(eventfds)} queues")
        for fd in eventfds:
            close(fd)
            tid = threadids[fd]
            errnow(f"interrupting thread {tid}...", end='')
            try: pthread_kill(tid, SIGUSR1)
            except ProcessLookupError:
                err("already")
                continue
            err("done")

    except OSError as e:
        if e.errno == EBADF: pass
        else:
            errnow(f"unhandled error: {errorcode[e.errno]}")
            raise

    finally:
        lock.release()

    errnow("queues aborted")

# get a batch of event packets from given input device fd and update
# counters.  we should always get a multiple of EVSIZE from the read().
# these threads are ephemeral and will be closed by abort_queues()
# and new task coroutine threads started when input devices change
#
def queue_events(fd):

    # register thread id so signal from abort_queues() can unblock read()
    global threadids
    threadids[fd] = get_ident()

    while True:

        seen = processed = 0
        kevs = mevs = 0
        syns = 0

        stamp = 0.0

        try:
            evbuf = read(fd, EVBUFSZ)

        except OSError as e:
            if e.errno in [ENODEV, EBADF]:
                errnow(f"fd {fd} disappeared")
                raise IdledRescan from None # suppress implicit chaining
            else:
                errnow(f"fd {fd} non-nodev-badf errno: {errorcode[e.errno]}")
                raise
            errnow("somehow still in queue_events")

        except Exception as e:
            err(f"queue exception: {e}"); raise

        for event in iter_unpack(EVFMT, evbuf):
            secs, usecs, itype, code, val = event
            seen += 1
            try: t = Evtype(itype)
            except ValueError:
                continue # ignore unknown types
            if debug:
                dprint(f"fd{fd}: type:{itype}, code:{code}, value:{val}")
            if t is Evtype.EV_KEY:
                if code <= 255 and val == 1: # ignore buttons and key releases
                    kevs += 1
            elif t is Evtype.EV_SYN:
                if code == 0:
                    # SYN_REPORT sometimes see a second one, should handle ok
                    if syns: dprint(f"syn2: fd{fd}: type:{itype}, code:{code}")
                    else: syns += 1; continue
                if code == 3: # shouldn't happen in practice
                    err("got SYN_DROPPED, handle this case!")
            else:
                # EV_REL or EV_ABS are the only ones left, both mouse events
                mevs += 1

            # struct timeval fields to time.time() float
            timetime = secs + usecs / 1000000.0

            if kevs and mevs:
                err("received both key and mouse events at once")

            if kevs: evq.put((Qtype.QT_KEY, timetime))
            if mevs: evq.put((Qtype.QT_MOUSE, timetime))

            processed += 1

        if t is not Evtype.EV_SYN:
            err(f"fd {fd}: sync packet not last, got {t} instead!")

        if debug:
            dprint(f"fd{fd}: saw {seen}, processed {processed}, "
                   f"key {kevs}, mouse {mevs}")


def process_events():

    # precreate fixed-length (by unidle number for each input type) list
    # of recent event timestamps, all entries primed with start time
    # less the idle interval.  we keep an index to the current timestamp
    # entry for writing each event as we receive it, and make it
    # circular by incrementing, modulo list length, each iteration
    #
    evtidx = [0] * qtypen
    events = [[]] * qtypen
    for qt in Qtype:
        v = qt.value
        primetime = nowtime() - unidle_s[v]
        events[v] = [primetime] * unidle_n[v]

    while True:

        timeout = rc.idle_secs if not idle else None
        try: qtype, timetime = evq.get(timeout=timeout)
        except Empty: afk(nowtime()); continue

        # oldest entry, at oldidx, will always be the slot after newest
        # (current event) index, which is the same as the maximally
        # previous one counting backwards (circularly).  we'll follow it
        # and compare current event to oldest each loop to see if less
        # than unidle_s secs have elapsed, which means no longer idle
        #
        events[qtype][evtidx[qtype]] = timetime
        oldidx = (evtidx[qtype] + 1) % unidle_n[qtype]
        timeoldest = events[qtype][oldidx]
        if idle and (timetime - timeoldest) < unidle_s[qtype]:
            unidle(timetime)
        evtidx[qtype] = oldidx


def watch_devices():

    # inotify lib default 1s epoll timeout, defeating purpose of using
    # input events (if we wanted a tick, we might rather just poll
    # /sys/kernel/irq/N/per_cpu_count).  already doing work in separate
    # threads so ok to block here as it will yield the processor.
    # duration 0 busy loops on epoll_wait(2) returning immediately; -1
    # not accepted; and not supplying duration defaults to 1s
    #
    blocktime = 2 << 20
    try:
        i = Inotify(block_duration_s=blocktime)
        i.add_watch("/dev/input/by-path")
        while True:
            for event in i.event_gen(yield_nones=False):
                _, evtypes, _, filename = event
                if set(evtypes).intersection(['IN_CREATE', 'IN_DELETE']):
                    if is_event_file(filename):
                        errnow(f"inotify event for {filename}, rescanning")
                        abort_queues() # trigger monitor exception
    except Exception as e:
        print_except_trace(e, "watch devices exception")


# spawn threads to block on input events and queue the ones we care
# about.  then we have another thread that blocks on queue.get() and
# processes the events.  note: to_thread() uses ThreadPoolExecutor which
# makes daemon threads, and therefore exceptions are not automatically
# printed (main thread dies and program is terminated), so portions of
# these tasks that can except need to catch/print/raise themselves. see
#  https://stackoverflow.com/questions/875453
#  https://stackoverflow.com/questions/49992329
#
async def monitor_events():

    tasks = []
    fdtasks = []

    def mktask(*args):
        func = args[0]
        fnname = func.__name__
        fnhash = f"{fnname}-{hash(func)}"
        dprint(f"making async task {fnhash}")
        return create_task(to_thread(*args), name=fnhash)


    for taskfunc in [process_events, watch_devices]:
        tasks.append(mktask(taskfunc))

    while True:

        open_event_fds()
        for fd in eventfds: fdtasks.append(mktask(queue_events, fd))
        errnow(f"monitoring {len(eventfds)} inputs")
        tasks += fdtasks
        done, pending = await wait(tasks, return_when=FIRST_EXCEPTION)

        # interrupt remaining read-blocked threads so they except and finish
        abort_queues()
        for task in pending:
            if task.done():
                done.append(pending.pop(task))
        ndone, npending = [len(tasks) for tasks in [done, pending]]
        errnow(f"{ndone} completed, {npending} running")

        pendnames = ",\x20".join([t.get_name() for t in pending])
        errnow(f"still pending: {pendnames}")

        try:
            for task in done:
                n = task.get_name()
                e = task.exception()
                if e:
                    if isinstance(e, IdledRescan):
                        errnow("monitor thread will rescan")
                    else:
                        print_except_trace(e, f"done: {n}")
                        break
                else:
                    errnow(f"done: {n}, clean finish")

        except Exception as e:
            print(f"exception at end of monitor loop: {e}")

        tasks = pending

    errnow("exiting monitor_events")

    # TODO how? after break above? any other cases?
    return False


def idled():

    signal(SIGHUP, sighangup)
    signal(SIGUSR1, sigusr1)

    while True:
        try:
            if not run(monitor_events()):
                break
        except KeyboardInterrupt:
            killpg(getpgid(0), SIGTERM)
        # ^^^ todo why requires ctrl-c twice?
        errnow("restarting idle daemon loop")

    errnow("exit requested")
    exit(EXIT_SUCCESS)

###

def timetimefmt(timetime=None):
    if not timetime: timetime = nowtime()
    return strftime("%Y%m%d%H%M%S", localtime(timetime))

def timetimehms(secs):
    return sub(r'\.\d+$', '', str(timedelta(seconds=secs)))

#

def _idle(timetime, func):
    global idle
    global lastchange
    now = nowtime()
    inv = func.__name__
    idle = True if inv == 'afk' else False
    elapsed = now - lastchange
    stamp = timetimefmt(timetime)
    since = timetimehms(elapsed)
    log(f"{stamp} {since:>9s} {inv:7s}")
    lastchange = now

def afk(timetime):
    _idle(timetime, afk)

def unidle(timetime):
    _idle(timetime, unidle)

#

def sighangup(*_):
    write(stderr.fileno(), b"handling hangup\n")
    try: execv(invpath, argv) # O_CLOEXEC default since py3.4
    except Exception as e:
        write(stderr.fileno(), b"re-invoke failure\n")
        raise RuntimeError("attempt to re-raise") from e

def sigusr1(*_):
    write(stderr.fileno(), b"thread interruption compelled\n")

###

def main():

    if debug == 1:
        breakpoint()

    process_rcfile()
    process_args()
    check_sanity()

    chdir("/")

    try: subprogram = globals()[invname]
    except (KeyError, TypeError):
        bomb(f"unimplemented command '{invname}'")

    return subprogram()

###

if __name__ == "__main__":

    invpath = realpath(argv[0])
    invname = basename(argv[0])
    args = argv[1:]
    pid = getpid()

    from bdb import BdbQuit
    if debug := int(getenv('DEBUG') or 0):
        import pdb
        from pprint import pp
        err('debug: enabled')
        unsetenv('DEBUG') # otherwise forked children hang

    try: main()
    except BdbQuit: bomb("debug: stop")
    except SystemExit: raise
    except KeyboardInterrupt: bomb("interrupted")
    except:
        print_exc(file=stderr)
        if debug: pdb.post_mortem()
    finally: # cpython bug 55589
        try: stdout.flush()
        finally:
            try: stdout.close()
            finally:
                try: stderr.flush()
                finally: stderr.close()
